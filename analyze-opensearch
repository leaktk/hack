#! /usr/bin/env python3

import sys
import requests
import json


def check_permissions(host, auth):
    """
    Checks the permissions of the provided credentials.
    """
    try:
        # First, check if the security plugin is loaded
        plugins_response = requests.get(
            f"{host}/_cat/plugins?format=json", auth=auth, timeout=5
        )
        plugins_response.raise_for_status()
        plugins = plugins_response.json()
        security_plugin_present = any(
            p.get("component") == "opensearch-security" for p in plugins
        )

        if not security_plugin_present:
            return {
                "message": "OpenSearch Security plugin not detected. Permissions cannot be checked."
            }

        # If security plugin is present, get the account details
        account_response = requests.get(
            f"{host}/_plugins/_security/api/account", auth=auth, timeout=5
        )
        account_response.raise_for_status()
        return account_response.json()
    except requests.exceptions.HTTPError as http_err:
        if http_err.response.status_code == 401 or http_err.response.status_code == 403:
            return {
                "error": "Authentication failed. Insufficient permissions to check credentials."
            }
        return {"error": f"HTTP error while checking permissions: {http_err}"}
    except requests.exceptions.RequestException as req_err:
        return {"error": f"Request exception while checking permissions: {req_err}"}
    except Exception as e:
        return {
            "error": f"An unexpected error occurred while checking permissions: {e}"
        }


def analyze_opensearch(host, username, password):
    auth = (username, password)
    is_valid = False
    analysis = {}

    try:
        response = requests.get(f"{host}/_cluster/health", auth=auth, timeout=5)

        response.raise_for_status()
        health_data = response.json()
        is_valid = True
        analysis = {
            "cluster_name": health_data.get("cluster_name"),
            "status": health_data.get("status"),
            "number_of_nodes": health_data.get("number_of_nodes"),
            "active_primary_shards": health_data.get("active_primary_shards"),
            "active_shards": health_data.get("active_shards"),
            "permissions": check_permissions(host, auth),
        }

        # Attempt to list indices
        indices_response = requests.get(
            f"{host}/_cat/indices?format=json", auth=auth, timeout=5
        )
        if indices_response.status_code == 200:
            indices_data = indices_response.json()
            analysis["indices"] = [idx.get("index") for idx in indices_data]
        else:
            analysis["indices_error"] = (
                f"Failed to retrieve indices, status: {indices_response.status_code}"
            )

    except requests.exceptions.HTTPError as http_err:
        analysis = {
            "error": str(http_err),
            "status_code": response.status_code if "response" in locals() else "N/A",
        }
        if "response" in locals() and (
            response.status_code == 401 or response.status_code == 403
        ):
            analysis["reason"] = "Authentication failed (Unauthorized or Forbidden)"
        else:
            analysis["reason"] = "HTTP error"
    except requests.exceptions.RequestException as req_err:
        analysis = {
            "error": str(req_err),
            "reason": "Request exception (e.g., connection error, timeout)",
        }
    except Exception as e:
        analysis = {"error": str(e), "reason": "An unexpected error occurred"}

    print(json.dumps({"valid": is_valid, "analysis": analysis}, indent=2))


if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python analyze-opensearch.py <host_url> <username> <password>")
        sys.exit(1)

    host_url = sys.argv[1]
    username = sys.argv[2]
    password = sys.argv[3]

    analyze_opensearch(host_url, username, password)
