#! /usr/bin/env python3
HELP_TEXT = """
NAME
    leaktk-on-result - perform an action on each result

USAGE
    leaktk-on-result <workdir> <command> [arg..]

DESCRIPTION

    This will run <command> for each result in a scanner response. This allows
    you to do custom actions when there's a leak.

    We strongly recommend the action be taken against the WHOLE file. There
    is a chance the scanner could miss another relevant secret in the file 
    and removing or quarantining the whole file helps mitigate this.

    ...TODO...

VARIABLES
    ...TODO...
""".strip()

import json
import subprocess
import sys
import re

VAR_RE = re.compile(r"\{\{\s*[\w\-\.]+\s*\}\}")

def get(data, path):
    """
    Return a string value for some dot separated path

    Example:
        data = {"foo": {"bar": "baz"}}
        get(data, "foo.bar") == "baz"
        get(data, "foo") == '{"bar": "baz"}'
    """
    value = data 
    for component in path.split("."):
        value = value.get(component, {})

    if not isinstance(value, str):
        value = json.dumps(value)

    return value


def render_args(data, args):
    for arg in args:
        pass

def main(args):
    if len(args) < 2: 
        print(HELP_TEXT)
        return 1

    returncode = 0
    workdir = args[0]
    cmd = args[1]
    cmd_args = args[2:]  

    for i, result in enumerate(map(json.loads, sys.stdin)):
        cmd_status = run(cmd, render_args(result, cmd_args))

        if cmd_status != 0 and main_status == 0:
            returncode = i

    return returncode 



if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
