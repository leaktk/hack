#!/usr/bin/env python3
"""
USAGE
    gitleaks-original-encoded-secrets <repo-path> <gitleaks-report.json>

DESCRIPTION
    For gitleaks findings with a `decoded:` tag, look up the original encoded
    secret in the repo and output it as a json list.
"""
import sys
import json
import subprocess


def extract(
    repo_path, commit_hash, file_path, start_line, start_column, end_line, end_column
):
    file_content = subprocess.check_output(
        ["git", "-C", repo_path, "show", f"{commit_hash}:{file_path}"],
        text=True,
    )

    li_start = start_line - 1
    li_end = end_line - 1
    col_start = start_column - 2
    col_end =  end_column - 1 if start_line - end_line > 0 else end_column - 1 - col_start

    lines = file_content.splitlines()

    # scope lines
    lines = [line for li, line in enumerate(lines) if li_start <= li <= li_end]

    # adjust column boundries
    lines[0] = lines[0][col_start:]
    lines[-1] = lines[-1][:col_end]

    return "".join(lines)


def main(repo_path, results_path):
    repo_path = repo_path
    with open(results_path, encoding="UTF-8") as results_file:
        results = json.load(results_file)

    decoded_results = [
        r for r in results if any(t.startswith("decoded:") for t in r["Tags"])
    ]

    encoded_secrets = [
        extract(
            repo_path,
            r["Commit"],
            r["File"],
            r["StartLine"],
            r["StartColumn"],
            r["EndLine"],
            r["EndColumn"],
        )
        for r in decoded_results
    ]

    print(json.dumps(encoded_secrets, indent=2))
    return 0


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(__doc__)
        sys.exit(1)

    sys.exit(main(*sys.argv[1:]))
